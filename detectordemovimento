<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Processamento Digital de Imagens</title>
  <link rel="stylesheet" href = "igordcn.github.io/css/estilo.css">
</head>
<body>
<h1>Detecção de Movimento</h1>
<h2>Descrição do Problema</h2>
<p>O problema consiste na identificação de movimento através da comparação dos histogramas de dois quadros em apenas um canal.    
</p>
<h2>Código</h2>
<p>
<pre>
#include &ltiostream>
#include &ltopencv2/opencv.hpp>

using namespace cv;
using namespace std;


int main(int argc, char** argv){
  Mat image;
  int width, height;
  VideoCapture cap;
  vector&ltMat> planes;
  Mat histR, histRant;
  int nbins = 64;
  float diference = 0;
  float range[] = {0, 256};
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;
  bool primeiro = true;
  char key;

  cap.open(0);
  
  if(!cap.isOpened()){
    cout << "cameras indisponiveis";
    return -1;
  }
  
  width  = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

  cout << "largura = " <<&lt width <&lt endl;
  cout << "altura  = " <&lt height <&lt endl;

  int histw = nbins, histh = nbins/2;
  Mat histImgR(histh, histw, CV_8UC3, Scalar(0,0,0));
  Mat histImgRant(histh, histw, CV_8UC3, Scalar(0,0,0));

  while(1){
    cap >> image;
    split (image, planes);//separa a imagem de varios canais em várias de um canal
    if(!primeiro){
      histR.copyTo(histRant);
      histImgR.copyTo(histImgRant);
    }
    calcHist(&planes[0], 1, 0, Mat(), histR, 1,  //calcula o histograma da imagem
             &nbins, &histrange,
             uniform, acummulate);

    normalize(histR, histR, 0, histImgR.rows, NORM_MINMAX, -1, Mat());
     
    if(!primeiro){
      for(int i = 0; i &lt nbins; i++){
        diference += abs(histR.at&ltfloat>(i)-histRant.at&ltfloat>(i));
      }
      if(diference > 90.0){
        cout << "Alerta!!!!! " <&lt diference <&lt endl;
      }
    }
    histImgR.setTo(Scalar(0));
    
    for(int i=0; i&ltnbins; i++){
      line(histImgR,
           Point(i, histh),
           Point(i, histh-cvRound(histR.at&ltfloat>(i))),
           Scalar(0, 0, 255), 1, 8, 0);
    }
    histImgR.copyTo(image(Rect(0, histh,nbins, histh)));
    if(!primeiro){
       histImgRant.copyTo(image(Rect(0, 0,nbins, histh)));
       if(diference > 90.0){
         imwrite("agoraalerta.png",image);
       }
    }
    diference = 0;
    imshow("image", image);
    key = (char)waitKey(10);
    primeiro = false;
    if(key == 'q'){
      break;
    }
  }
  return 0;
}
</pre>
</p>
<h2>Descrição do Programa</h2>
<p>O programa utiliza a webcam para capturar as imagens, utilizando um objeto de VideoCapture e um laço infinito. A imagem, após ser capturada, é separada em canais e o único que vai ser utilizado é o que corresponde a cor vermelha. Logo depois, é calculado o histograma apenas do canal vermelho, que é comparado com o histograma da imagem anterior. Um limiar foi estabelecido para determinar se o alarme vai ser ativado e ele é comparado com a soma das diferenças absolutas de todos os tons. Quando o alarme é ativado, uma mensagem é apresentada no display. E apenas a partir da segunda iteração a comparação é feita, já que na primeira tem-se só uma imagem.</h2>
<h2>Resultados</h2>
<figure id="original">
   <img src="igordcn.github.io/agoraalerta.png">
   <figcaption>agoraalerta.png</figcaption>
</figure>
<p>No canto superior esquerdo, os histogramas utilizados para o cálculo da detecção de movimento são mostrados</p>
</body>
</html>
